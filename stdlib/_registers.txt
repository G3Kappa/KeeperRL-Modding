Def Lhs() Chain {
    Write0("__LHSA")
    CopyTo("__LHS0", "__LHS1", "__LHS2", "__LHS3", "__LHS4", "__LHS5", "__LHS6", "__LHS7")
} End

Def LhsAddr() Chain {
    Write1("__LHSA")
    CopyTo("__LHS0", "__LHS1", "__LHS2", "__LHS3", "__LHS4", "__LHS5", "__LHS6", "__LHS7")
} End

Def Rhs() Chain {
    Write0("__RHSA")
    Write0("__RHSD")
    CopyTo("__RHS0", "__RHS1", "__RHS2", "__RHS3", "__RHS4", "__RHS5", "__RHS6", "__RHS7")
} End

Def RhsAddr() Chain {
    Write1("__RHSA")
    Write0("__RHSD")
    CopyTo("__RHS0", "__RHS1", "__RHS2", "__RHS3", "__RHS4", "__RHS5", "__RHS6", "__RHS7")
} End

Def RhsData() Chain {
    Write0("__RHSA")
    Write1("__RHSD")
    CopyTo("__RHS0", "__RHS1", "__RHS2", "__RHS3", "__RHS4", "__RHS5", "__RHS6", "__RHS7")
} End

Def EqLhs()
    EqBits("__LHS0", "__LHS1", "__LHS2", "__LHS3", "__LHS4", "__LHS5", "__LHS6", "__LHS7")
End

Def EqRhs()
    EqBits("__RHS0", "__RHS1", "__RHS2", "__RHS3", "__RHS4", "__RHS5", "__RHS6", "__RHS7")
End

Def CopyFromLhs()
    CopyFrom("__LHS0", "__LHS1", "__LHS2", "__LHS3", "__LHS4", "__LHS5", "__LHS6", "__LHS7")
End

Def CopyFromRhs()
    CopyFrom("__RHS0", "__RHS1", "__RHS2", "__RHS3", "__RHS4", "__RHS5", "__RHS6", "__RHS7")
End

Def CopyToLhs()
    IfElse(Is1("__LHSA"), {
        CopyTo("_tmp0", "_tmp1", "_tmp2", "_tmp3", "_tmp4", "_tmp5", "_tmp6", "_tmp7")
        regSP() IfElse(EqLhs(), {
            # Special syntax for (SP), currently doesn't support offsets
            PopStack()
            CopyFrom("_tmp0", "_tmp1", "_tmp2", "_tmp3", "_tmp4", "_tmp5", "_tmp6", "_tmp7")
            PushStack()
        }, {
            # All other addresses are assumed to be heap locations
            CopyFromLhs() Addr()
            CopyFrom("_tmp0", "_tmp1", "_tmp2", "_tmp3", "_tmp4", "_tmp5", "_tmp6", "_tmp7")
            WriteHeap()
        })
    }, {
        CopyTo("__LHS0", "__LHS1", "__LHS2", "__LHS3", "__LHS4", "__LHS5", "__LHS6", "__LHS7")
    })
End

Def CopyToRhs()
    IfElse(Is1("__RHSA"), {
        CopyTo("_tmp0", "_tmp1", "_tmp2", "_tmp3", "_tmp4", "_tmp5", "_tmp6", "_tmp7")
        regSP() IfElse(EqRhs(), {
            # Special syntax for (SP), currently doesn't support offsets
            PopStack()
            CopyFrom("_tmp0", "_tmp1", "_tmp2", "_tmp3", "_tmp4", "_tmp5", "_tmp6", "_tmp7")
            PushStack()
        }, {
            # All other addresses are assumed to be heap locations
            CopyFromRhs() Addr()
            CopyFrom("_tmp0", "_tmp1", "_tmp2", "_tmp3", "_tmp4", "_tmp5", "_tmp6", "_tmp7")
            WriteHeap()
        })
    }, {
        CopyTo("__RHS0", "__RHS1", "__RHS2", "__RHS3", "__RHS4", "__RHS5", "__RHS6", "__RHS7")
    })
End

Def CopyToRegister(Predicate, Body)
    FirstSuccessful {
        ChainUntilFail {  regA() If(Predicate, { Body  CopyToA()  }) }
        ChainUntilFail {  regB() If(Predicate, { Body  CopyToB()  }) }
        ChainUntilFail {  regC() If(Predicate, { Body  CopyToC()  }) }
        ChainUntilFail {  regD() If(Predicate, { Body  CopyToD()  }) }
        ChainUntilFail {  regE() If(Predicate, { Body  CopyToE()  }) }
        ChainUntilFail { regHL() If(Predicate, { Body CopyToHL()  }) }
        ChainUntilFail { regSP() If(Predicate, { Body CopyToSP()  }) }
    }
End

Def CopyFromRegister(Predicate)
    FirstSuccessful {
        ChainUntilFail {  regA() If(Predicate, {  CopyFromA()  }) }
        ChainUntilFail {  regB() If(Predicate, {  CopyFromB()  }) }
        ChainUntilFail {  regC() If(Predicate, {  CopyFromC()  }) }
        ChainUntilFail {  regD() If(Predicate, {  CopyFromD()  }) }
        ChainUntilFail {  regE() If(Predicate, {  CopyFromE()  }) }
        ChainUntilFail { regHL() If(Predicate, { CopyFromHL()  }) }
        ChainUntilFail { regSP() If(Predicate, { CopyFromSP()  }) }
    }
End

Def EvalLhs()
    # If the left hand side is an address
    IfElse(Is1("__LHSA"), {
        regSP() IfElse(EqRhs(), {
            PeekStack()
        }, {
            CopyFromRegister(EqLhs()) Addr() ReadHeap()
        })
    }, {
        # If the left hand side is a register index
        CopyFromRegister(EqLhs())
    })
End

Def EvalRhs()
    # If the right hand side is plain data
    IfElse(Is1("__RHSD"), {
        CopyFromRhs()
    }, {
        # If the right hand side is an address
        IfElse(Is1("__RHSA"), {
            regSP() IfElse(EqRhs(), {
                PeekStack()
            }, {
                CopyFromRegister(EqRhs()) Addr() ReadHeap()
            })
        }, {
            # If the right hand side is a register index
            CopyFromRegister(EqRhs())
        })
    })
End

Def regA() 0x01() End
Def regF() 0x11() End
Def regB() 0x02() End
Def regC() 0x12() End
Def regD() 0x03() End
Def regE() 0x13() End
Def regHL() 0x20() End
Def regSP() 0x21() End

Def CopyFromA() CopyFrom("__A0", "__A1", "__A2", "__A3", "__A4", "__A5", "__A6", "__A7") End
Def CopyFromF() CopyFrom("__F0", "__F1", "__F2", "__F3", "__F4", "__F5", "__F6", "__F7") End
Def CopyFromB() CopyFrom("__B0", "__B1", "__B2", "__B3", "__B4", "__B5", "__B6", "__B7") End
Def CopyFromC() CopyFrom("__C0", "__C1", "__C2", "__C3", "__C4", "__C5", "__C6", "__C7") End
Def CopyFromD() CopyFrom("__D0", "__D1", "__D2", "__D3", "__D4", "__D5", "__D6", "__D7") End
Def CopyFromE() CopyFrom("__E0", "__E1", "__E2", "__E3", "__E4", "__E5", "__E6", "__E7") End
Def CopyFromHL() CopyFrom("__HL0", "__HL1", "__HL2", "__HL3", "__HL4", "__HL5", "__HL6", "__HL7") End
Def CopyFromSP() CopyFrom("__SP0", "__SP1", "__SP2", "__SP3", "__SP4", "__SP5", "__SP6", "__SP7") End

Def CopyToA() CopyTo("__A0", "__A1", "__A2", "__A3", "__A4", "__A5", "__A6", "__A7") End
Def CopyToF() CopyTo("__F0", "__F1", "__F2", "__F3", "__F4", "__F5", "__F6", "__F7") End
Def CopyToB() CopyTo("__B0", "__B1", "__B2", "__B3", "__B4", "__B5", "__B6", "__B7") End
Def CopyToC() CopyTo("__C0", "__C1", "__C2", "__C3", "__C4", "__C5", "__C6", "__C7") End
Def CopyToD() CopyTo("__D0", "__D1", "__D2", "__D3", "__D4", "__D5", "__D6", "__D7") End
Def CopyToE() CopyTo("__E0", "__E1", "__E2", "__E3", "__E4", "__E5", "__E6", "__E7") End
Def CopyToHL() CopyTo("__HL0", "__HL1", "__HL2", "__HL3", "__HL4", "__HL5", "__HL6", "__HL7") End
Def CopyToSP() CopyTo("__SP0", "__SP1", "__SP2", "__SP3", "__SP4", "__SP5", "__SP6", "__SP7") End
